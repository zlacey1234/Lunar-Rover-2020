%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Node: Navigation
%
% Purpose:
% The purpose of the estimation node is to compute an estimate of the
% lunar rovers state from noisy sensor data. This may include fusing data
% from different sources (e.g., barometer and lidar for altittude),
% filtering noisy signals (e.g., low-pass filters), implementing
% state estimators (e.g., kalman filters) and navigation algorithms.
%
% Input:
%   - ROS topics: several sensor data topics
%           /camera/odom/sample
%
%   - ROS topic: /features (generated by vision)
%
% Output:
%   - ROS topic:
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% prepare workspace
clear all; close all; clc; format compact;

% intialize ros node
if(~robotics.ros.internal.Global.isNodeActive)
    rosinit('192.168.1.2'); % ip of the ROS Master
end

% Subscribers
desiredPoseSubscriber = rossubscriber('/desiredPose');
velocityCmdSubscriber = rossubscriber('/cmd_vel');
VIODataSubscriber = rossubscriber('/camera/odom/sample', 'nav_msgs/Odometry');

% Publisher

controlStartPublisher = rospublisher('/startControl', 'std_msgs/Bool');

r = robotics.Rate(100);
reset(r);

VIOMsg = VIODataSubscriber.LatestMessage;
desiredPoseMsg = desiredPoseSubscriber.LatestMessage;
velocityCmdMsg = velocityCmdSubscriber.LatestMessage;

% initialize control off
controlStartMsg = rosmessage('std_msgs/Bool');
controlStartMsg.Data = 0;
send(controlStartPublisher, controlStartMsg);


%% VIO

% VIO Time
VIOTime = VIOMsg.Header.Stamp.Sec;
VIOTimeNSec = VIOMsg.Header.Stamp.Nsec;
VIOTimeLog = double(VIOTime) + double(VIOTimeNSec)*10^-9;
% VIO Pose
% Position
VIOPositionX = VIOMsg.Pose.Pose.Position.X;
VIOPositionY = VIOMsg.Pose.Pose.Position.Y;
VIOPositionZ = VIOMsg.Pose.Pose.Position.Z;

% Orientation
VIOOrientationX = VIOMsg.Pose.Pose.Orientation.X;
VIOOrientationY = VIOMsg.Pose.Pose.Orientation.Y;
VIOOrientationZ = VIOMsg.Pose.Pose.Orientation.Z;
VIOOrientationW = VIOMsg.Pose.Pose.Orientation.W;

VIOeuler = quat2eul([VIOOrientationW VIOOrientationX VIOOrientationY VIOOrientationZ]);

VIOpsi = rad2deg(VIOeuler(1));
VIOtheta = rad2deg(VIOeuler(2));
VIOphi = rad2deg(VIOeuler(3));

% VIO Twist
VIOTwistLinearVelocityX = VIOMsg.Twist.Twist.Linear.X;
VIOTwistLinearVelocityY = VIOMsg.Twist.Twist.Linear.Y;
VIOTwistLinearVelocityZ = VIOMsg.Twist.Twist.Linear.Z;

VIOTwistAngularVelocityX = VIOMsg.Twist.Twist.Angular.X;
VIOTwistAngularVelocityY = VIOMsg.Twist.Twist.Angular.Y;
VIOTwistAngularVelocityZ = VIOMsg.Twist.Twist.Angular.Z;

%% Desired Pose
% Position
DesiredXMeters = desiredPoseMsg.Linear.X;
DesiredYMeters = desiredPoseMsg.Linear.Y;

% Orienation
DesiredYawRad = desiredPoseMsg.Angular.Z;

%% Velocity Cmd
% Linear
LinearXMeterPerSec = velocityCmdMsg.Linear.X;

% Angular
AngularZRadPerSec = velocityCmdMsg.Angular.Z;

%%
dateString = datestr(now,'mmmm_dd_yyyy_HH_MM_SS_FFF');

VIOLog = ['C:\Users\zlace\OneDrive\Documents\AMAV\Lunar-Rover-2020\development\data_analysis\Navigation' '/VIO_' dateString '.log'];
VelocityCmdLog = ['C:\Users\zlace\OneDrive\Documents\AMAV\Lunar-Rover-2020\development\data_analysis\Navigation' '/VelCmd_' dateString '.log'];
DesiredPoseLog = ['C:\Users\zlace\OneDrive\Documents\AMAV\Lunar-Rover-2020\development\data_analysis\Navigation' '/DesiredPose_' dateString '.log'];

fprintf('Press any key to begin mission.\n');
pause

fprintf('Entering loop ...\n');
% run control once start button is pressed
controlStartMsg.Data = 1;
send(controlStartPublisher , controlStartMsg);


while(1)
    tic
    pause(eps); 
    
    VIOMsg = VIODataSubscriber.LatestMessage;
    desiredPoseMsg = desiredPoseSubscriber.LatestMessage;
    velocityCmdMsg = velocityCmdSubscriber.LatestMessage;
    
    %% VIO
    % VIO Time
    VIOTime = VIOMsg.Header.Stamp.Sec;
    VIOTimeNSec = VIOMsg.Header.Stamp.Nsec;
    VIOTimeLog = double(VIOTime) + double(VIOTimeNSec)*10^-9;
    % VIO Pose
    % Position
    VIOPositionX = VIOMsg.Pose.Pose.Position.X;
    VIOPositionY = VIOMsg.Pose.Pose.Position.Y;
    VIOPositionZ = VIOMsg.Pose.Pose.Position.Z;
    
    % Orientation
    VIOOrientationX = VIOMsg.Pose.Pose.Orientation.X;
    VIOOrientationY = VIOMsg.Pose.Pose.Orientation.Y;
    VIOOrientationZ = VIOMsg.Pose.Pose.Orientation.Z;
    VIOOrientationW = VIOMsg.Pose.Pose.Orientation.W;
    
    VIOeuler = quat2eul([VIOOrientationW VIOOrientationX VIOOrientationY VIOOrientationZ]);
    
    VIOpsi = rad2deg(VIOeuler(1));
    VIOtheta = rad2deg(VIOeuler(2));
    VIOphi = rad2deg(VIOeuler(3));
    
    % VIO Twist
    VIOTwistLinearVelocityX = VIOMsg.Twist.Twist.Linear.X;
    VIOTwistLinearVelocityY = VIOMsg.Twist.Twist.Linear.Y;
    VIOTwistLinearVelocityZ = VIOMsg.Twist.Twist.Linear.Z;
    
    VIOTwistAngularVelocityX = VIOMsg.Twist.Twist.Angular.X;
    VIOTwistAngularVelocityY = VIOMsg.Twist.Twist.Angular.Y;
    VIOTwistAngularVelocityZ = VIOMsg.Twist.Twist.Angular.Z;
    %% Desired Pose
    % Position
    DesiredXMeters = desiredPoseMsg.Linear.X
    DesiredYMeters = desiredPoseMsg.Linear.Y
    
    % Orienation
    DesiredYawRad = desiredPoseMsg.Angular.Z
    
    %% Velocity Cmd
    % Linear
    LinearXMeterPerSec = velocityCmdMsg.Linear.X
    
    % Angular
    AngularZRadPerSec = velocityCmdMsg.Angular.Z
    
    %%
    pFile1 = fopen(DesiredPoseLog, 'a');
    pFile2 = fopen(VIOLog, 'a');
    pFile3 = fopen(VelocityCmdLog, 'a');
    
    %
    fprintf(pFile1,'%6.6f,', DesiredXMeters);
    fprintf(pFile1,'%6.6f,', DesiredYMeters);
    
    fprintf(pFile1,'%6.6f\n', DesiredYawRad);
    
    % write csv file Realsense VIO
    fprintf(pFile2,'%6.6f,',VIOTimeLog);
    
    fprintf(pFile2,'%6.6f,',VIOPositionX);
    fprintf(pFile2,'%6.6f,',VIOPositionY);
    fprintf(pFile2,'%6.6f,',VIOPositionZ);
    fprintf(pFile2,'%6.6f,',VIOphi);
    fprintf(pFile2,'%6.6f,',VIOtheta);
    fprintf(pFile2,'%6.6f,',VIOpsi);
    
    fprintf(pFile2,'%6.6f,',VIOTwistLinearVelocityX);
    fprintf(pFile2,'%6.6f,',VIOTwistLinearVelocityY);
    fprintf(pFile2,'%6.6f,',VIOTwistLinearVelocityZ);
    fprintf(pFile2,'%6.6f,',VIOTwistAngularVelocityX);
    fprintf(pFile2,'%6.6f,',VIOTwistAngularVelocityY);
    fprintf(pFile2,'%6.6f\n',VIOTwistAngularVelocityZ);
    
    %
    fprintf(pFile3,'%6.6f,',LinearXMeterPerSec);
    fprintf(pFile3,'%6.6f\n',AngularZRadPerSec);
    
    
    
    fclose(pFile1);
    fclose(pFile2);
    fclose(pFile3);
    
    waitfor(r);
end
